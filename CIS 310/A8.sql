-- ASSIGNMENT 8
-- CIS310-01
-- DUE DATE: NOV 1, 2017
-- CAILYN COCHRAN

--1. List the products with a list price greater than the average list price of all products.

--VIEW MERCHANDISE
SELECT *
FROM PET..MERCHANDISE 

-- AVG LIST PRICE = 23.2175
SELECT AVG(LISTPRICE) FROM PET..MERCHANDISE

SELECT   M.ITEMID, M.DESCRIPTION, M.LISTPRICE
FROM     PET..MERCHANDISE M
WHERE    M.LISTPRICE > (SELECT AVG(M.LISTPRICE) FROM PET..MERCHANDISE M)
ORDER BY M.LISTPRICE DESC

--2. Which merchandise items have an average sale price more than 50 percent higher than their average purchase cost?


SELECT O.ITEMID, AVG(O.COST) AS [AVERAGE COST], AVG(S.SALEPRICE) AS [AVERAGE SALE PRICE] 
FROM   PET..ORDERITEM O INNER JOIN PET..SALEITEM S ON O.ITEMID = S.ITEMID
GROUP BY O.ITEMID
HAVING AVG(S.SALEPRICE) > (1.5 *AVG(O.COST))
	 

--3. List the employees and their total merchandise sales expressed as a percentage of total merchandise sales for all employees

--VIEW SALEITEM TABLE
SELECT * 
FROM PET..SALEITEM
--FIND EMPLOYEE TOTAL SALES
SELECT SUM(I.SALEPRICE*QUANTITY) AS TOTALSALES
FROM   PET..SALEITEM I

SELECT S.EMPLOYEEID, E.LASTNAME,SUM(I.SALEPRICE*I.QUANTITY) AS TOTALSALES, (SUM(I.SALEPRICE*I.QUANTITY)/(SELECT SUM(SALEPRICE*QUANTITY) FROM PET..
SALEITEM))*100 AS PCTSALES
FROM PET..SALE S INNER JOIN PET..SALEITEM I ON S.SALEID = I.SALEID
     INNER JOIN PET..EMPLOYEE E ON E.EMPLOYEEID = S.EMPLOYEEID
GROUP BY S.EMPLOYEEID, E.LASTNAME
ORDER BY S.EMPLOYEEID


--4. On average, which supplier charges the highest shipping cost as a percent of the merchandise order total? 

SELECT   S.SUPPLIERID, S.NAME, (AVG(SHIPPINGCOST)/(SUM(O.QUANTITY*O.COST))*100 AS[PCTSHIPCOST]
FROM     PET..SUPPLIER S INNER JOIN PET.. MERCHANDISEORDER M ON S.SUPPLIERID = M.SUPPLIERID
	     INNER JOIN PET..ORDERITEM O ON O.PONUMBER = M.PONUMBER
GROUP BY S.SUPPLIERID, S.NAME
HAVING   AVG(SHIPPINGCOST)/(SUM(O.QUANTITY*O.COST))*100 = 
         (SELECT TOP 1  AVG(SHIPPINGCOST)/(SUM(O.QUANTITY*O.COST))*100 AS[PCTSHIPCOST]
          FROM          PET..SUPPLIER S INNER JOIN PET.. MERCHANDISEORDER M ON S.SUPPLIERID = M.SUPPLIERID
	                    INNER JOIN PET..ORDERITEM O ON O.PONUMBER = M.PONUMBER
          GROUP BY      S.SUPPLIERID, S.NAME
		  ORDER BY      AVG(SHIPPINGCOST)/(SUM(O.QUANTITY*O.COST))*100 DESC
         )

--5. Which customer has given us the most total money for animals and merchandise?
--CREATE TEMP ANIMAL SALE TABLE
CREATE VIEW TOTAL_ANIMAL_SALE AS
SELECT   C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, SUM(A.SALEPRICE) AS TOTAL
FROM     PET..SALEANIMAL A INNER JOIN PET..SALE S ON A.SALEID = S.SALEID
	     INNER JOIN PET..CUSTOMER C ON C.CUSTOMERID = S.CUSTOMERID
GROUP BY C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME

--CREAT TEMP MERCH TABLE
CREATE VIEW TOTAL_MERCH_SALE AS
SELECT   C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, SUM(I.SALEPRICE*I.QUANTITY) AS TOTAL
FROM     PET..SALEITEM I INNER JOIN PET..SALE S ON I.SALEID = S.SALEID
	     INNER JOIN PET..CUSTOMER C ON C.CUSTOMERID = S.CUSTOMERID
GROUP BY C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME

--CREATE TEMP TOTAL PURCHASE TABLE
SELECT TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME, SUM(TAS.[TOTAL] + TMS.[TOTAL]) AS [GRAND TOTAL] INTO TOTAL_CUST_PURCHASES
FROM TOTAL_ANIMAL_SALE TAS INNER JOIN TOTAL_MERCH_SALE TMS ON TAS.CUSTOMERID = TMS.CUSTOMERID
GROUP BY TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME

--VIEW TEMP TABLE
SELECT     *
FROM       TOTAL_CUST_PURCHASES

--SELECT TOP CUSTOMER TOTAL PURCHASE OF ANIMAL AND MERCHANDISE

SELECT   TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME, TAS.TOTAL, TMS.TOTAL, SUM(TAS.TOTAL + TMS.TOTAL) AS [GRAND TOTAL] 
FROM     TOTAL_ANIMAL_SALE TAS INNER JOIN TOTAL_MERCH_SALE TMS ON TAS.CUSTOMERID = TMS.CUSTOMERID
GROUP BY TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME, TAS.TOTAL, TMS.TOTAL
HAVING   SUM(TAS.TOTAL + TMS.TOTAL) = 
		    (SELECT TOP 1 SUM(TAS.TOTAL + TMS.TOTAL)
		     FROM   TOTAL_ANIMAL_SALE TAS INNER JOIN TOTAL_MERCH_SALE TMS ON TAS.CUSTOMERID = TMS.CUSTOMERID
		     GROUP BY TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME, TAS.TOTAL, TMS.TOTAL
		     ORDER BY SUM(TAS.TOTAL + TMS.TOTAL) DESC
		     )
--6. Which customers who bought more than $100 in merchandise in May also spent more than $50 on merchandise in October?

--CREATE TEMP CUSTOMER TABLE FOR MAY
CREATE VIEW CUSTOMER_MAY_TEMP AS
SELECT      C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, SUM(I.SALEPRICE*I.QUANTITY) AS [MAY TOTAL]
FROM        PET..SALEITEM I INNER JOIN PET..SALE S ON I.SALEID = S.SALEID
            INNER JOIN PET..CUSTOMER C ON C.CUSTOMERID = S.CUSTOMERID
WHERE       MONTH(S.SALEDATE) = 5
GROUP BY    C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME

-- CREATE TEMP CUSTOMER TABLE FOR OCTOBER
CREATE VIEW CUSTOMER_OCTOBER_TEMP AS
SELECT   C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, SUM(I.SALEPRICE*I.QUANTITY) AS [OCTOBER Total]
FROM     PET..SALEITEM I INNER JOIN PET..SALE S ON I.SALEID = S.SALEID
         INNER JOIN PET..CUSTOMER C ON C.CUSTOMERID = S.CUSTOMERID
WHERE    MONTH(S.SALEDATE) = 10
GROUP BY C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME

-- VIEW TEMP MAY AND OCTOBER TABLES
SELECT* FROM PET..SALE WHERE MONTH(SALEDATE)=5
SELECT * FROM CUSTOMER_OCTOBER_TEMP

-- DISPLAY CUSTOMER WHO BOUGHT OVER 100 IN MAY AND OVER 50 IN OCTOBER
SELECT MT.CUSTOMERID, MT.FIRSTNAME, MT.LASTNAME, MT.[MAY TOTAL]
FROM   CUSTOMER_MAY_TEMP MT INNER JOIN CUSTOMER_OCTOBER_TEMP OT ON MT.CUSTOMERID = OT.CUSTOMERID
WHERE  [MAY TOTAL] > 100 AND
       [OCTOBER TOTAL] > 50

--7. What was the net change in quantity on hand for premium canned dog food between January 1 and July 1? 

SELECT   M.DESCRIPTION, M.ITEMID, SUM(OI.QUANTITY) AS PURCHASED, SUM(SI.QUANTITY) AS SOLD, (SUM(OI.QUANTITY)-SUM(SI.QUANTITY)) AS NETINCREASE
FROM     PET..MERCHANDISE M INNER JOIN PET..SALEITEM SI ON M.ITEMID = SI.ITEMID
	     INNER JOIN PET..ORDERITEM OI ON SI.ITEMID = OI.ITEMID
	     INNER JOIN PET..SALE S ON SI.SALEID = S.SALEID
	     INNER JOIN PET..MERCHANDISEORDER MO ON OI.PONUMBER = MO.PONUMBER
WHERE    M.DESCRIPTION = 'Dog Food-Can-Premium' AND
         S.SALEDATE BETWEEN '2004-01-01'AND '2004-07-01' AND
	     MO.RECEIVEDATE BETWEEN '2004-01-01'AND '2004-07-01'
GROUP BY M.DESCRIPTION, M.ITEMID

--8 Which are the merchandise items with a list price of more than $50 and no sales in July?

--VIEW LIST PRICE GREATER THAN 50
SELECT   M.ITEMID, M.DESCRIPTION, M.LISTPRICE
FROM     PET..MERCHANDISE M
WHERE    M.LISTPRICE > 50
ORDER BY M.ITEMID

--CREATE VIEW THAT SHOWS ORDERS IN JULY
CREATE VIEW ITEM_TEMP AS
SELECT M.ITEMID, M.DESCRIPTION, M.LISTPRICE
FROM   PET..MERCHANDISE M INNER JOIN PET..SALEITEM SI ON M.ITEMID = SI.ITEMID
                          INNER JOIN PET..SALE S ON SI.SALEID = S.SALEID
WHERE  M.LISTPRICE > 50 AND 
       MONTH(S.SALEDATE)=7  

--VIEW ORDERS THAT WERE NOT IN JULY
SELECT M.ITEMID, M.DESCRIPTION, M.LISTPRICE
FROM   PET..MERCHANDISE M
WHERE  M.LISTPRICE > 50 AND NOT EXISTS
      (SELECT   *
       FROM     ITEM_TEMP IT
       WHERE    M.ITEMID = IT.ITEMID
	  )
       ORDER BY M.ITEMID

-- 9  Which merchandise items with more than 100 units on hand have not been ordered in 2004? Use an outer join to answer the question.

SELECT M.ITEMID, M.DESCRIPTION, M.QUANTITYONHAND
FROM   PET..MERCHANDISE M FULL OUTER JOIN PET..ORDERITEM OI ON M.ITEMID = OI.ITEMID
FULL   OUTER JOIN PET..MERCHANDISEORDER MO ON OI.PONUMBER = MO.PONUMBER
WHERE  M.QUANTITYONHAND > 100 AND YEAR(MO.ORDERDATE) IS NULL


--10. Which merchandise items with more than 100 units on hand have not been ordered in 2004? Use a subquery to answer the question.

SELECT M.ITEMID, M.DESCRIPTION, M.QUANTITYONHAND
FROM   PET..MERCHANDISE M 
WHERE  QUANTITYONHAND >100 AND M.ITEMID NOT IN (SELECT O.ITEMID
												FROM   PET..ORDERITEM O
											   )



-- 11. Save a query to answer Exercise 5: total amount of money spent by each customer. 
--Create the table shown to categorize customers based on sales. 
--Write a query that lists each customer from the first query and displays the proper label

--CREATE CATEGORY TABLE
CREATE TABLE CATEGORY
(
   CATEGORY VARCHAR(4),
   LOW INT NOT NULL,
   HIGH INT NOT NULL,
   PRIMARY KEY (CATEGORY)
)

--POPULATE ROWS
INSERT INTO CATEGORY
VALUES    ('WEAK',0,200), ('GOOD',201,800), ('BEST',801,10000)


--VIEW CATEGORY TABLE
SELECT *
FROM   CATEGORY


-- CREATE TOTAL PURCHASES BY CUSTOMER TABLE
SELECT   TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME, SUM(TAS.[TOTAL] + TMS.[TOTAL]) AS [GRAND TOTAL] INTO TOTAL_CUST_PURCHASES
FROM     TOTAL_ANIMAL_SALE TAS INNER JOIN TOTAL_MERCH_SALE TMS ON TAS.CUSTOMERID = TMS.CUSTOMERID
GROUP BY TAS.CUSTOMERID, TAS.FIRSTNAME, TAS.LASTNAME

-- VIEW THE TEMPORARY TABLE
SELECT *
FROM   TOTAL_CUST_PURCHASES

--COMBINE THE EXERCISE 5 WITH TEMP CATEGORY TABLE 

SELECT   C.CUSTOMERID, C.LASTNAME, C.FIRSTNAME, TCP.[GRAND TOTAL], CATEGORY
FROM     TOTAL_CUST_PURCHASES [TCP] INNER JOIN PET..CUSTOMER C ON TCP.CUSTOMERID = C.CUSTOMERID, CATEGORY
WHERE    [GRAND TOTAL] >=LOW AND [GRAND TOTAL] < HIGH


--12. List all suppliers (animals and merchandise) who sold us items in June. Identify whether they sold use animals or merchandise.
--Name   OrderType
SELECT *
FROM   PET..SUPPLIER

--MERCHANDISE
SELECT S.NAME AS Name, 'MERCHANDISE' AS OrderType
FROM   PET..SUPPLIER S INNER JOIN PET..MERCHANDISEORDER MO ON S.SUPPLIERID = MO.SUPPLIERID
WHERE  MONTH(MO.ORDERDATE) = 6
--ANIMAL
SELECT S.NAME AS Name, 'ANIMAL' AS OrderType
FROM   PET..SUPPLIER S INNER JOIN PET..ANIMALORDER AO ON S.SUPPLIERID = AO.SUPPLIERID
WHERE MONTH(AO.ORDERDATE) = 6

--UNION ALL
SELECT S.NAME AS Name, 'MERCHANDISE' AS OrderType
FROM   PET..SUPPLIER S INNER JOIN PET..MERCHANDISEORDER MO ON S.SUPPLIERID = MO.SUPPLIERID
WHERE  MONTH(MO.ORDERDATE) = 6
UNION ALL
SELECT S.NAME AS Name, 'ANIMAL' AS OrderType
FROM   PET..SUPPLIER S INNER JOIN PET..ANIMALORDER AO ON S.SUPPLIERID = AO.SUPPLIERID
WHERE MONTH(AO.ORDERDATE) = 6

--13. Drop the table Category. Write a query to create the table Category shown in Exercise 11.
 
--DROP TABLE
DROP TABLE CATEGORY

--CREATE CATEGORY TABLE
CREATE TABLE CATEGORY
(
   CATEGORY VARCHAR(4),
   LOW INT NOT NULL,
   HIGH INT NOT NULL,
   PRIMARY KEY (CATEGORY)
)

--14. Write a query to insert the first row of data for the table in Exercise 11.
INSERT INTO CATEGORY
VALUES ('WEAK',0,200)

--15. Write a query to change the High value to 400 in the first row of the table in Exercise 11.
UPDATE CATEGORY
SET    HIGH = '400'
WHERE  CATEGORY = 'WEAK'

--17. Create a query to delete the first row of the table in Exercise 11.
DELETE
FROM CATEGORY
WHERE CATEGORY = 'WEAK'

--18. Create a copy of the Employee table structure. Use a delete query to remove all data from the copy. 
--Write a query to copy from the original employee table into the new one.

--COPY
SELECT * INTO CATEGORY_NEW
FROM CATEGORY

--DELETE QUERY
DELETE 
FROM CATEGORY_NEW

--INSERT INTO NEW TABLE
INSERT INTO CATEGORY_NEW
SELECT*
FROM CATEGORY



